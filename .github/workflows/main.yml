name: ecs deploy

on: [pull_request]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1          

      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'        

      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on ubuntu-latest
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Dependencies
        run: npm install

      - name: Build
        run: npm run build

      - name: Test
        run: npm run test

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}    
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_REPO_NAME }}
          IMAGE_TAG_COMMIT_SHA: ${{ github.sha }}
          IMAGE_TAG_BRANCH: $(echo ${{ github.ref }} | sed -e "s#refs/heads/##g" | sed -e "s#/#_#g") # TODO: release時を考慮していない(release時は refs/tags/)
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_COMMIT_SHA -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_BRANCH .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_COMMIT_SHA
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_BRANCH          
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG_COMMIT_SHA"

      # 既存のTask定義をダウンロード(security対策) 初回のTask定義はcfnなどで作ること
      # jq del(.xxx)は不要項目の削除のため行っている
      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition first-run-task-definition-nakamura:2 --query taskDefinition \
            | jq 'del(.compatibilities)' \
            | jq 'del(.taskDefinitionArn)' \
            | jq 'del(.requiresAttributes)' \
            | jq 'del(.revision)' \
            | jq 'del(.status)' \
            > ./task-definition.json

      # Task定義をAWSに登録するのではなくLocalのTask定義の値を書き換えるだけのもの
      - name: Render Amazon ECS task definition
        id: render-nginx-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./task-definition.json
          container-name: nginx
          image: ${{steps.build-image.outputs.image}}

      - name: Deploy to Amazon ECS service
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-nginx-container.outputs.task-definition }}
          cluster: nakamura-cluster
          service: nginx-service-nakamura
          # ECSサービスが安定した状態になるのを待つかどうか。
          wait-for-service-stability: false